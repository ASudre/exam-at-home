type Questionnaire @model
@auth(rules: [
  { allow: private, operations: [read], provider: iam },
  { allow: private, operations: [read] },
  { allow: groups, groups: ["Admin"] }
]) {
  id: ID!
  startTime: AWSDateTime!
  name: String!
  duration: Int!
  createdAt: AWSDateTime
  questions: [Question] @connection(name: "ByQuestionnaire")
}

interface QuestionInterface {
  id: ID!
  imageKey: String!
  imageName: String!
  createdAt: AWSDateTime
  questionnaire: Questionnaire
}

type CandidateQuestion implements QuestionInterface {
  id: ID!
  imageKey: String!
  imageName: String!
  createdAt: AWSDateTime
  questionnaire: Questionnaire
  answers: AnswerConnection
  answer: String
}

type AnswerConnection {
  items: [Answer]
  nextToken: String
}

type Question
@model
@auth(rules: [
  { allow: groups, groups: ["Admin"] },
  { allow: private, operations: [read] },
  { allow: private, provider: iam, operations: [read] }
]) {
  id: ID!
  imageKey: String!
  imageName: String!
  answer: String
    @auth(rules: [
      { allow: groups, groups: ["Admin"] },
      { allow: private, provider: iam, operations: [read] }
    ])
  createdAt: AWSDateTime
  questionnaire: Questionnaire @connection(name: "ByQuestionnaire")
  answers: [Answer] @connection(name: "ByQuestion")
}

type Answer @model
@auth(rules: [
  { allow: owner, operations: [read] },
  { allow: private, provider: iam, operations: [create, update, read, delete] },
  { allow: groups, groups: ["Admin"], operations: [read] },
  { allow: groups, groups: ["Forbidden"] }
]) {
  id: ID!
  question: Question @connection(name: "ByQuestion")
  answer: String!
  owner: String
  createdAt: AWSDateTime
}

type QuestionConnection {
  items: [CandidateQuestion]
  nextToken: String
}

type CandidateQuestionnaire {
  startsIn: Int
  remainingTime: Int
  status: String
  questions: QuestionConnection
}

type Query {
  getCandidateQuestionnaire(id: ID): CandidateQuestionnaire @function(name: "GraphQLResolverFunction-${env}")
}

input SaveAnswerInput {
  id: ID!
  answerQuestionId: ID!
  answer: String
}

input DeleteAnswerInput {
  id: ID!
}

type CandidateAnswer {
  id: ID
  answer: String
  questionnaireStatus: String
}

type Mutation {
  createCandidateAnswer(input: SaveAnswerInput): CandidateAnswer @function(name: "GraphQLResolverFunction-${env}")
  updateCandidateAnswer(input: SaveAnswerInput): CandidateAnswer @function(name: "GraphQLResolverFunction-${env}")
  deleteCandidateAnswer(input: SaveAnswerInput): CandidateAnswer @function(name: "GraphQLResolverFunction-${env}")
}
